<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>author</key>
	<string>Hiroyuki Yamasaki</string>
	<key>bundleVersion</key>
	<integer>2</integer>
	<key>category</key>
	<string></string>
	<key>command</key>
	<string>#!/usr/bin/ruby

Encoding.default_external = "UTF-8"
line = readlines
ary = line.map { |s| s.chomp.split(/\t/) }
csv = []
keys = ary.shift.map(&amp;:to_sym)
ary.each_with_index do |row|
  hash = {}
  row.each_with_index do |x, idx|
    hash[keys[idx]] = x
  end
  csv &lt;&lt; hash
end

class MarkdownTable
  def self.mb_length(str)
    cnt = 0
    str.each_char do |ch|
      cnt += ch.ord &lt; 255 ? 1 : 2
    end
    cnt
  end

  def self.col_width(table)
    col_length = []
    table.each do |cols|
      cols.each.with_index do |col, i|
        col_length[i] = [col_length[i].to_i, mb_length(col.to_s)].max
      end
    end
    col_length
  end

  def self.align_text(str, align, length)
    padding_length = length - mb_length(str)
    case align
    when 'center'
      padding_left  = (padding_length.to_f / 2).floor
      padding_right = (padding_length.to_f / 2).ceil
      ' ' * padding_left + str + ' ' * padding_right
    when 'left'
      str + ' ' * padding_length
    when 'right'
      ' ' * padding_length + str
    else
      raise "invalid align: #{align}"
    end
  end

  def self.numeric?(str)
    numeric_chars = '0123456789-()%,'
    str.each_char.all? { |ch| numeric_chars.include?(ch) }
  end

  def self.separator_line(col_width)
    col_width.map { |width| '-' * width }.join(' | ').prepend('| ').concat(' |')
  end

  def self.build_markdown(table, header = true)
    table = hash_to_array(table) if hash_array?(table)
    cw = col_width(table)
    lines = []
    table.each.with_index do |cols, row_index|
      text_fields = []
      cols.map!(&amp;:to_s)
      cols.each.with_index do |col, col_index|
        align = if row_index.zero? &amp;&amp; header
                  'center'
                elsif numeric?(col)
                  'right'
                else
                  'left'
                end
        text_fields &lt;&lt; align_text(col, align, cw[col_index])
      end
      lines &lt;&lt; '| ' + text_fields.join(' | ') + ' |'
      lines &lt;&lt; separator_line(cw) if row_index.zero? &amp;&amp; header
    end
    lines.join("\n")
  end

  def self.hash_to_array(hash_array)
    table = []
    colnames = hash_array.first.keys
    table &lt;&lt; colnames
    hash_array.each do |items|
      row = []
      colnames.each do |colname|
        row &lt;&lt; items[colname]
      end
      table &lt;&lt; row
    end
    table
  end

  def self.hash_array?(obj)
    obj.first.class == Hash
  end
end

table = MarkdownTable.build_markdown(csv)

IO.popen("__CF_USER_TEXT_ENCODING=$UID:0x8000100:0x8000100 pbcopy", "w") { |pipe| pipe.puts table }
</string>
	<key>contact</key>
	<string>lnznfnxv.cubar@tznvy.pbz</string>
	<key>description</key>
	<string>Creates a markdown table of the result set given as input.

Output table is UTF8-encoded and should be viewed with a monospaced font.</string>
	<key>input</key>
	<string>selectedtablerowsastab</string>
	<key>name</key>
	<string>CopyAsMD</string>
	<key>output</key>
	<string>none</string>
	<key>scope</key>
	<string>datatable</string>
	<key>uuid</key>
	<string>D3F89188-6C2C-40AC-A88A-CA9E20608A60</string>
</dict>
</plist>
